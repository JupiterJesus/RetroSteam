using CommandLine;
using CommandLine.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RetroSteam
{
    class Options
    {
        [Option('e', "emulators", Required = false, DefaultValue = "emulators.ini", HelpText = @"INI file(s) containing emulator configuration. Additional files should be separated by comma. Default is .\emulators.ini")]
        public string EmulatorsFile { get; set; }

        [Option('c', "config", Required = false, DefaultValue = "config.ini", HelpText = @"INI file containing the app configuration. Default is .\config.ini")]
        public string ConfigFile { get; set; }

        [Option('s', "shortcuts", Required = false, DefaultValue = null, HelpText = "Force app to use a specific shortcuts.vdf file instead of finding it in your Steam installation.")]
        public string ShortcutsFile { get; set; }

        [Option('o', "output", Required = false, DefaultValue = "console", HelpText = "Select the output format - 'console', 'steam' or a file path. Defaults to printing everything to the console instead of writing to the shortcuts file to make sure you don't run until you are sure you're ready! Steam outputs to the steam shortcuts file. Any other value is interpreted as an output json filename, which can itself be used as input to the program.")]
        public string Output { get; set; }

        [Option('i', "input", Required = false, DefaultValue = null, HelpText = "Load an JSON file instead of parsing for ROMs. While you could write the XML by hand, this is most likely to be generated by an earlier run using the 'output' parameter.")]
        public string Input { get; set; }

        [Option('f', "frontend", Required = false, DefaultValue = false, HelpText = "Start program as a frontend instead of a shortcut generator. If/when implemented, this will allow you to generate an emulation library, then view and launch roms through the frontend GUI.")]
        public bool Frontend { get; set; }

        [Option('g', "gui", Required = false, DefaultValue = false, HelpText = "Run as a GUI program instead of a console program. Files will be parsed/loaded into the GUI, but file output will be delayed until further user action.")]
        public bool Gui { get; set; }

        [Option('u', "user", Required = false, DefaultValue = null, HelpText = "User ID of the Steam User to use for this run. Not necessary if there's only one user, but required if there's more than one!")]
        public string SteamUser { get; set; }

        [HelpOption(HelpText = "Display this help screen.")]

        public string GetUsage()
        {
            var usage = new StringBuilder();
            usage.AppendLine("RetroSteam");
            usage.AppendLine("Read emulators.ini for help running the app.");
            return usage.ToString();
        }

    }
}
