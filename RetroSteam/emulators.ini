; First things first (although I implemented this somewhat late): variables
; You can create any name/value pair using standard INI format.
; Just don't use any built-in names.
; Stick to all-caps names and you're guaranteed to not duplicate any built-in variables.
; To use a variable, put it inside %{} and it will be replaced with the assigned value during parsing.
; You can refer to other variables when defining a new variable, as long as the referenced variable comes EARLIER in the file.
; All variable names and values are STRINGS only. You can't do any operations on them, call functions, or anything - just assign a value to a name.
; So, don't try to do FOO=%{BAR+1} or anything like that. This isn't a true language parser.

; I designed all the defaults based on my own system.
; The root of it all is the Emulation folder on the E: drive.
; Every system is a subfolder of Emulation - psx, ps2, nes, snes, etc - always lowercase
; retroarch is important enough that I went ahead and gave it its own subfolder alongside them - E:\Emulation\retroarch
; Every system folder has at least the following subfolders - emulators, roms
; Roms are either in the roms folder, or in a subfolder (like if they're separated by USA/EUR/JAP, or if each game is in its own folder).
; The emulators folder contains one folder for each emulator on my system.
; Retroarch has been configured with per-core configurations that I meticulously set up.
; Whenever I launch retroarch, whether through steam, a batch file or a shortcut file,
; I specify a core and a config file. This lets any given shortcut act like its own unique version of retroarch,
; with its own look and feel, directories, settings, controller configs and so on.

; Here's the best part - YOU DON'T HAVE TO DO THAT AT ALL!
; If you want to keep your setup the way it is, you can customize every single thing about this file to match
; your own setup. Roms are defined as a folder and a regular expression to match anything under that folder.
; It would be hard to find a set of roms that you *coudln't* match with regular expressions, so this will
; handle 99.9999% of installations.

; I created the key/value pair system to simplify setup, especially if you have something similar to mine,
; so that you only have to tweak the variables in the first half of the file. 
; You can throw all of that out and configure each steam category / emulator uniquely, usign whatever directories,
; file name patterns and emulators you want.

; By default I point to the boxart image packs that you can download through retroarch.
; By the time anyone else sees this, I may have implemented remote path support, which would allow you to use
; a URI and a pattern to match on a remote host to find images, which would be great for auto-finding steam-grid
; images. I don't plan on adding specific support for any given site - instead, figure out what the URI
; pattern is and figure out how to pass that in.
; If I do add support for specific sites and APIs, it will only be if I turn this app into a full-fledge 
; emu frontend.

; One last note - many of the examples are actually to demonstrate features, and aren't the optimal
; configuration settings - especially the first few, which are heavily documented and do lots of stuff
; just to show what is possible. Feel free to tweak SNES, for example, to work more like the later, more "standard" categories.

; Base path for all emulation, edit with the root folder of your installation
BASE=E:\Emulation

; Paths for retroarch and the retroarch executable
; Default is the retroarch folder directly inside the base emulation folder
; Modify if you keep it somewhere else
RETROARCH_BASE=%{BASE}\retroarch
RETROARCH=%{RETROARCH_BASE}\retroarch.exe

; Retroarch cores. If you use retroarch for any of these systems, choose the core you like best
; Ideally also create a per-core config file for each one, even if you aren't ready to customize it yet.
; You can customize them later, after you launch into any given core
; The following are my choices
SNES_CORE=bsnes_accuracy
NES_CORE=nestopia
GB_CORE=gambatte
GBC_CORE=gambatte
GBA_CORE=vbam
NDS_CORE=desmume
N64_CORE=mupen64plus
PSX_CORE=mednafen_psx_hw
PSP_CORE=ppsspp
GENESIS_CORE=genesis_plus_gx

; SNES emulator and roms
SNES_BASE=%{BASE}\snes
SNES_ROMS=%{SNES_BASE}\roms\USA
SNES_EMU_BASE=%{RETROARCH_BASE}
SNES_EMU=%{RETROARCH}

; NES emulator and roms
NES_BASE=%{BASE}\nes
NES_ROMS=%{NES_BASE}\roms\USA
NES_EMU_BASE=%{RETROARCH_BASE}
NES_EMU=%{RETROARCH}

; N64 emulator and roms
N64_BASE=%{BASE}\n64
N64_ROMS=%{N64_BASE}\roms\USA
N64_EMU_BASE=%{RETROARCH_BASE}
N64_EMU=%{RETROARCH}

; Path for wii-u emulator and roms
; Modify for your installation
WIIU_BASE=%{BASE}\wii-u
WIIU_ROMS=%{WIIU_BASE}\roms
WIIU_EMU_BASE=%{WIIU_BASE}\emulators\cemu
;WIIU_EMU=%{WIIU_EMU_BASE}\Cemu.exe ; Uncomment if you use want to just use cemu and not a batch file
WIIU_EMU=%{WIU_BASE}\emulators\cemu-fullscreen.bat

; Path for wii/gc emulator and roms
; Modify for your installation
WII_BASE=%{BASE}\wii
WII_ROMS=%{WII_BASE}\roms
GCN_BASE=%{BASE}\wii
GCN_ROMS=%{GCN_BASE}\roms\gcn
WII_EMU_BASE=%{WII_BASE}\emulators\dolphin
WII_EMU=%{WII_EMU_BASE}\Dolphin.exe

; Game Boy emulators and roms
; Modify for your installation
GB_BASE=%{BASE}\gb
GB_ROMS=%{GB_BASE}\roms
GB_EMU_BASE=%{RETROARCH_BASE}
GB_EMU=%{RETROARCH}

; Game Boy Color emulators and roms
; Modify for your installation
GBC_BASE=%{BASE}\gbc
GBC_ROMS=%{GBC_BASE}\roms
GBC_EMU_BASE=%{RETROARCH_BASE}
GBC_EMU=%{RETROARCH}

; Game Boy Advance emulators and roms
; Modify for your installation
GBA_BASE=%{BASE}\gba
GBA_ROMS=%{GBA_BASE}\roms
;GBA_EMU_BASE=%{GBA_BASE}\emulators\vbam ; uncomment to use visual boy advance
;GBA_EMU=%{GBA_EMU_BASE}\VisualBoyAdvance-M.exe ; uncomment to use visual boy advance
GBA_EMU_BASE=%{RETROARCH_BASE} ; uncomment to use retroarch
GBA_EMU=%{RETROARCH} ; uncomment to use retroarch

; Nintendo DS emulators and roms
; Modify for your installation
NDS_BASE=%{BASE}\nds
NDS_ROMS=%{NDS_BASE}\roms
NDS_EMU_BASE=%{NDS_BASE}\emulators\desmume
NDS_EMU=%{NDS_EMU_BASE}\DeSmuME.exe
;NDS_EMU_BASE=%{RETROARCH_BASE} ; uncomment to use retroarch
;NDS_EMU=%{RETROARCH} ; uncomment to use retroarch

;
;
;Executable=%{BASE}\3ds\emulators\citra\nightly-mingw\citra-qt.exe
3DS_BASE=%{BASE}\3ds
3DS_ROMS=%{3DS_BASE}\roms
3DS_EMU_BASE=%{3DS_BASE}\emulators\citra\nightly-mingw
;3DS_EMU=%{3DS_EMU_BASE}\citra-qt.exe ; Uncomment to use citra-qt.exe (gui version) directly
;3DS_EMU=%{3DS_EMU_BASE}\citra.exe ; Uncomment to use citra.exe (command line version) directly
3DS_EMU=%{3DS_BASE}\emulators\citra-fullscreen.bat

; Path for ps1 emulator and isos
; Modify for your installation
PSX_BASE=%{BASE}\psx
PSX_ROMS=%{PSX_BASE}\roms
PSX_EMU_BASE=%{RETROARCH_BASE)
PSX_EMU=%{RETROARCH}

; Path for ps2 emulator and isos
; Modify for your installation
PS2_BASE=%{BASE}\ps2
PS2_ROMS=%{PS2_BASE}\roms
PS2_EMU_BASE=%{PS2_BASE}\emulators\pcsx2
PS2_EMU=%{PS2_EMU_BASE}\pcsx2.exe

; Path for ps3 emulator and isos
; Modify for your installation
PS3_BASE=%{BASE}\ps3
PS3_ROMS=%{PS3_BASE}\roms
PS3_EMU_BASE=%{PS3_BASE}\emulators\rpcs3
PS3_EMU=%{PS3_EMU_BASE}\rpcs3.exe

; Path for psp emulator and isos
; Modify for your installation
PSP_BASE=%{BASE}\psp
PSP_ROMS=%{PSP_BASE}\roms
;PSP_EMU_BASE=%{PSP_BASE}\emulators\ppsspp ; uncomment to use PPSSPP
PSP_EMU_BASE=%{RETROARCH_BASE}
;PSP_EMU=%{PSP_EMU_BASE}\PPSSPPWindows64.exe ; uncomment to use PPSSPP
PSP_EMU=%{RETROARCH}

; Path for psp emulator and isos
; Modify for your installation
GENESIS_BASE=%{BASE}\genesis
GENESIS_ROMS=%{GENESIS_BASE}\roms
GENESIS_EMU_BASE=%{RETROARCH_BASE}
GENESIS_EMU=%{RETROARCH}

; The first example of a category / emulator will be heavily documented
; It will use retroarch to run SNES games. The shortcut will "Start In" the retroarch directory.
; Roms will be passed to retroarch using their absolute path, so don't change drives!
; I don't recommend absolute paths in general, but if you really want...
; Images will come from the retroarch boxart directory
; The way I configure retroarch is to have a per-core config file, so every system has its own set of
; directories, playlists, gamepad config, shaders and so on

; Section title will become the Steam category
[2e. SNES]
; Executable is straightforward - full path to the exe. "Start In" defaults to the exe directory if StartIn is left blank
Executable=%{SNES_EMU}
; StartIn is for the shortcut's Start In attribute. If you leave it blank, it defaults to the exe directory.
StartIn=%{SNES_EMU_BASE}
; Parameters to use as Steam "Launch Options". You can use substitutions, starting with the % symbol, to expand values, like %P for the rom
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{SNES_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{SNES_CORE}_libretro.dll.cfg" "%P"
; Base path to look for roms. Straightforward.
RomBasePath=%{SNES_ROMS}
; This parameter uses a regular expression to tell us how to find roms in the rom base folder.
; It searches all sub-folders, too.
; The regex will match the FULL PATH of the rom, so keep that in mind. The ^ symbol will match the start of the path,
; which is typically the drive letter, while $ will match the end of the file extension.
; In order to specify which part of the rom path or name holds the rom's title (used for the %n substitution),
; you must use an explicit capturing group. A normal group is just (like this), but an explicit group works like
; (?<title>), and will produce a group match whose name is "title". If you have a group named title that matches
; the rom path, I'll use that. If you don't have it in your regexp, or I don't find it, the shortcut will default
; to just using the file's base name without directory or extension. This works fine sometimes, but isn't great
; when the directory holds the rom name - like in most Wii U dumps.
RomRegex=(?<title>[^\\]+)\.((sfc)|(smc))$
; For the title, we use the file name without extension, and we add (SNES) to the end
; As mentioned in the documentation for RomRegex, the default is %n, captured from path, if you leave this empty
TitlePattern=%n (SNES)
; We give a path where all files are located. I don't yet have any kind of internet image downloading,
; but thanks to retroarch I have a butt-ton of boxarts in a convenient spot, all named after my roms!
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Super Nintendo Entertainment System\Named_Boxarts
; We tell the app the name of the image file. You can put in a single file here for every single rom,
; or you can put in parameters so the image is different for every rom.
; Here I use an image with the same base filename as the rom. In this case, %n and %T are interchangeable
; If ImageFile is not blank, it takes priority over ImageRegex
ImageFile=%n.png
; Here I have an option for a way to look up a file by searching for an existing file that matches a regular expression.
; This is slower, since we must do a regex match and read all the files in a directory.
; It could also be less reliable, if your regex matches multiple files. I'll use the first matched file, in that case.
; This is useful if you don't know for sure what the file name will be, but you've got an idea of how it should be named.
ImageRegex=

; The next example is the same as above, except we use relative paths for roms.
; We'll do NES for a change, too

[2d. NES]
Executable=%{NES_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{NES_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{NES_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{NES_ROMS}
RomRegex=(?<title>[^\\]+)\.(nes)$
TitlePattern=%n (NES)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Nintendo Entertainment System\Named_Boxarts
ImageFile=%n.png
ImageRegex=

; This one is extra hard, because the "rom" is actually a directory of files, and not packed
; into a single file. If you keep your files as WUDs, though, this is much simpler and behaves
; just like other roms. If you have both WUDs and regular roms, I suggest putting the WUD into
; its own folder just like the unpacked games, in a sub-folder called "code", 
; then add WUD as a potential extension in the below regex. You can do it however you want though:
; that's the beauty of this system. My app isn't telling YOU how to organize your roms, you are telling
; IT, even if the language you use for telling it can get complicated.
;
; The example is for unpacked Loadiine files in a directory tree with an RPX executable in the code directory, 
; because that is how the games are unpacked and prepped for emulation using WiiU USB Helper.
;
;
; PS: The regex allows for brackets after the title with the game code.
; Like this: Bayonetta [AAFD01]\code\BayonetLoader.rpx
; This regex makes the shortcut title "Bayonetta" and ignores the space and the [...]
; If you want to include the game ID in the shortcut title, remove the (...)? that comes right
; after the title capture. I also use a non-greedy capture so it doesn't grab up the space that
; comes between the title and the game id, by putting a ? after the +.
;
; PPS: I'm personally using a two batch files, cemu.bat and cemu-fullscreen.bat,
; to handle launching my games. My batch files handle the -f for fullscreen and -g for
; selecting an executable, and also handles selecting the cemu version I want to use
; (currently, for example, BotW works better on 1.11.3 for me).
; If you want to directly use Cemu.exe, use the commented out Executable and Parameters.

[2a. Wii U]
Executable=%{WIIU_EMU}
StartIn=%{WIIU_EMU_BASE}
;Parameters=-f -g "%p"
Parameters="%p"
RomBasePath=%{WIIU_ROMS}
RomRegex=(?<title>[^\\]+?)( *\[.+\])?\\code\\[^\\]+\.rpx$
TitlePattern=%n (Wii-U)
ImageBasePath= 
ImageFile=
ImageRegex=

; The interesting thing here is that I want to reference my roms with relative paths, but I've divided them into
; multiple folders, including wii, gcn, wad and vc. I need to filter using my RomRegex to only get things
; in the wii and gc folders, but that requires using parantheses around text that I don't want to capture.
; Thus, noncapturing groups. As explained earlier, (?:) lets you put parentheses around words without including
; them in your title
; 
; A second way to handle it is to use explicit capture. In fact, I may have changed everything
; since I wrote this so that ONLY explicit capture using the name <title> will get you the rom
; title. Explicit capture of the title looks like (?<title>......), where the dots are the regex
; that matches the title. So, some of the stuff I just wrote may be outdated by the time anyone sees this...
;
; Finally, you can make the title just be your filename, minus path and extension, using %n.
; If you do that, there's no need to do any title capturing. Title capturing is for when you
; have something more complicated, like if the rom name is in the directory, or if the filename
; includes other stuff in it that you don't want in the title. In the sample below, I use both
; title capture AND %n. To use the capture title, use %T instead of %n.
;
; Another interesting thing here is that I use %R, which gets the rom's path relative to the
; rom base. So, instead of "bar.iso", it will look like "wii\bar.iso". We need that since our StartIn
; is the base roms directory, and roms can be in either the vc or wii directories.
; This config is probably tied with wii u as most complicated, but really, if you organize your files 
; differently from me it will be less complicated.
[2b. Wii]
Executable=%{WII_EMU}
StartIn=%{WII_ROMS}
Parameters=-e "%p"
RomBasePath=%{WII_ROMS}
RomRegex=((wii)|(vc))\\(?<title>[^\\]+)\.((elf)|(dol)|(iso)|(wbfs)|(wad)|(gcz))$
TitlePattern=%T (WII)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Wii\Named_Boxarts
ImageFile=%n.png
ImageRegex=

; Since Dolphin handles gamecube games and wii games, they're all mixed up. This is just like the wii config,
; but since all of my gamecube games are in one folder, it is easier to just set that folder, instead of
; doing that crazy shit I did with regular expressions to handle multiple folders.
; So, the lesson is that this will be much simpler if you put all of your roms for a system in one folder.
; No, I won't implement something dumb like "a semicolon-separated list of parameters". Fuck that. 
[2c. Gamecube]
Executable=%{WIIU_EMU}
StartIn=
Parameters=-e "%p"
RomBasePath=%{GCN_ROMS}
RomRegex=(?<title>[^\\]+)\.((iso)|(gcm)|(gcz))$
TitlePattern=%T (GCN)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Gamecube\Named_Boxarts
ImageFile=%T.png
ImageRegex=

; As of writing this I'm not totally sure what to do about N64.
; Retroarch supports it, but didn't run it well the last I checked
; PJ64 is old as shit, but I've used it a ton in the past. 
; It lacks all the modern stuff that retroarch has, like controller support for the UI and a million other things
; It won't even launch into fullscreen, and has no command line params
; I haven't used any other n64 emulators
; I'm going to default to retroarch
[2e. Nintendo 64]
Executable=%{N64_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{N64_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{N64_CORE}_libretro.dll.cfg" "%p"
;Parameters="%p"
RomBasePath=%{N64_ROMS}
RomRegex=(?<title>[^\\]+)\.((n64)|(v64)|(z64))$
TitlePattern=%T (N64)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Nintendo 64\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2h. GB]
Executable=%{GB_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{GB_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{GB_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{GB_ROMS}
RomRegex=(?<title>[^\\]+)\.(gb)$
TitlePattern=%T (Game Boy)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Game Boy\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2i. GBC]
Executable=%{GBC_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{GBC_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{GBC_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{GBC_ROMS}
RomRegex=(?<title>[^\\]+)\.(gbc)$
TitlePattern=%T (Game Boy Color)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Game Boy Color\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2j. GBA]
Executable=%{GBA_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{GBA_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{GBA_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{GBA_ROMS}
RomRegex=(?<title>[^\\]+)\.(gba)$
TitlePattern=%T (Game Boy Advance)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Game Boy Advance\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2k. NDS]
Executable=%{NDS_EMU}
StartIn=
Parameters=
RomBasePath=%{NDS_ROMS}
RomRegex=(?<title>[^\\]+)\.(nds)$
TitlePattern=%T (Nintendo DS)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Nintendo DS Decrypted\Named_Boxarts
ImageFile=%T.png
ImageRegex=

; This one is complicated, just like the wii-u, because the "rom" is can be a directory of files, and not packed
; into a single file. If you keep your files as 3ds files, though, this is much simpler and behaves
; just like other roms. If you have both 3ds files and cxi, I suggest putting the 3ds into
; its own folder just like the unpacked games, then change it to allow cxi and 3ds files.
;
; The example is for CXI files in their own directories, because that is how the games are unpacked
; and prepped for emulation using WiiU USB Helper.
;
; PS: The regex allows for brackets after the title with the game code.
; Like this: Yoshi's New Island [ATAE]\game.cxi
; This regex makes the shortcut title "Yoshi's New Island" and ignores the space and the [...]
; If you want to include the game ID in the shortcut title, remove the (...)? that comes right
; after the title capture. I also use a non-greedy capture so it doesn't grab up the space that
; comes between the title and the game id, by putting a ? after the +.
;
; PPS: I'm personally using a two batch files, citra.bat and citra-fullscreen.bat,
; to handle launching my games. My batch files handle fullscreen and windowed by
; by replacing the citra config file before launching, either a version with fullscreen=true
; or one with fullscreen=false.
; If you want to directly use citra.exe, use the commented out Executable. Note that you can
; use both citra and citra-qt on the command line, but I think they use different configs,
; so make sure to configure the one you want before launching on steam.
[2l. 3DS]
Executable=%{3DS_EMU}
StartIn=
Parameters="%p"
RomBasePath=%{3DS_ROMS}
RomRegex=(?<title>[^\\]+?)( *\[.+\])\\(.+)\.cxi$
TitlePattern=%T (3DS)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Nintendo - Nintendo 3DS\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2l. PSX]
Executable=%{PSX_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{PSX_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{PSX_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{PSX_ROMS}
RomRegex=(?<title>[^\\]+)\.(cue)$
TitlePattern=%n (PSX)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Sony - PlayStation\Named_Boxarts
ImageFile=%n.png
ImageRegex=

; This is pretty basic - a combo of several of the simpler aspects of previous configs
; Interesting is that pcsx2 lets you use the --cfgpath="path\to\config" to load up per-game configs. Try it out!
; --nogui is also a good option here
; Lots more at https://wiki.pcsx2.net/Command-line_support, which also has info on customizing steam launch configs and getting game images
[2m. PS2]
Executable=%{PS2_EMU}
StartIn=
Parameters="%p" --fullscreen --nogui
RomBasePath=%{PS2_ROMS}
RomRegex=(?<title>[^\\]+)\.iso$
TitlePattern=%n (PS2)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Sony - PlayStation 2\Named_Boxarts
ImageFile=%T.jpg
ImageRegex=

; Yes, PS3 emulation works pretty well now, and can be launched from a command line / steam
; The way it handles roms is pretty weird though.
; I keep all of my PS3 games in the roms folder, which contains a subfolder with the game's ID.
; RPCS3 wants to have all of its games inside of its virtual HDD, so I create a junction in the dev_hdd0/DISC
; directory to each game in the roms folder. Launching it is like launching a wii-u game - you give
; it the path to the executable inside of the game folder. It is always EBOOT.BIN inside of the PS3_GAME/USRDR directory.
; I don't think there is currently a command line option to go fullscreen, so you will have to
; configure RPCS3 to go fullscreen when a game is launched. Any game launch should then be fullscreen,
; whether from the RPCS3 gui or the command line.
[2n. PS3]
Executable=%{PS3_EMU}
StartIn=
Parameters="%p"
RomBasePath=%{PS3_ROMS}
RomRegex=(?<title>[^\\]+?)( *\(.+\])\\.+\\PS3_GAME\\USRDIR\\EBOOT\.BIN$
TitlePattern=%T (PS3)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Sony - PlayStation 3\Named_Boxarts
ImageFile=%T.png
ImageRegex=

; Arguable whether the real PPSSPP is better or retroarch.
; The real one tends to be newer code, but the retroarch version has all of the
; great retroarch functionality.
; PPSSPP runs faster and it does have its own controller UI.
; It's up to you, but I like having as much stuff under retroarch as possible.
[2o. PSP]
Executable=%{PSP_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{PSP_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{PSP_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{PSP_ROMS}
RomRegex=(?<title>[^\\]+)\.((iso)|(cso))$
TitlePattern=%T (PSP)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Sony - PlayStation Portable\Named_Boxarts
ImageFile=%T.png
ImageRegex=

[2p. Sega Genesis]
Executable=%{GENESIS_EMU}
StartIn=
Parameters=--menu -L "%{RETROARCH_BASE}\cores\%{GENESIS_CORE}_libretro.dll"  -c "%{RETROARCH_BASE}\config\%{GENESIS_CORE}_libretro.dll.cfg" "%p"
RomBasePath=%{GENESIS_ROMS}
RomRegex=(?<title>[^\\]+)\.md$
TitlePattern=%T (Genesis)
ImageBasePath=%{RETROARCH_BASE}\thumbnails\Sega - Mega Drive - Genesis\Named_Boxarts
ImageFile=%T.png
ImageRegex=