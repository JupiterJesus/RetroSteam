; The first example will be heavily documented
; It will use retroarch to run SNES games. The shortcut will "Start In" the retroarch directory.
; Roms will be passed to retroarch using their absolute path, so don't change drives!
; Images will come from the retroarch boxart directory
; The way I configure retroarch is to have a per-core config file, so every system has its own set of
; directories, playlists, gamepad config, shaders and so on

; Section title will become the Steam category
[2f. SNES]
; Executable is straightforward - full path to the exe. "Start In" defaults to the exe directory if StartIn is left blank
Executable=E:\Emulation\retroarch\retroarch.exe
; StartIn is for the shortcut's Start In attribute. If you leave it blank, it defaults to the exe directory.
StartIn=
; Parameters to use as Steam "Launch Options". You can use substitutions, starting with the % symbol, to expand values, like %P for the rom
Parameters=--menu -L "E:\emulation\retroarch\cores\bsnes_accuracy_libretro.dll"  -c "E:\emulation\retroarch\config\bsnes_accuracy_libretro.dll.cfg" "%P"
; Base path to look for roms. Straightforward.
RomBasePath=E:\Emulation\snes\roms\USA
; This parameter uses a regular expression to tell us how to find roms in the rom base folder.
; It searches all sub-folders, too.
; The regex will match the FULL PATH of the rom, so keep that in mind. The ^ symbol will match the start of the path,
; which is typically the drive letter, while $ will match the end of the file extension.
; In order to specify which part of the rom path or name holds the rom's title (used for the shortcut name),
; you must use an explicit capturing group. A normal group is just (like this), but an explicit group works like
; (?<title>), and will produce a group match whose name is "title". If you have a group named title that matches
; the rom path, I'll use that. If you don't have it in your regexp, or I don't find it, the shortcut will default
; to just using the file's base name without directory or extension. This works fine sometimes, but isn't great
; when the directory holds the rom name - like in most Wii U dumps.
RomRegex=(?<title>[^\\]+)\.((sfc)|(smc))$
; We give a path where all files are located. I don't yet have any kind of internet image downloading,
; but thanks to retroarch I have a butt-ton of boxarts in a convenient spot, all named after my roms!
ImageBasePath=E:\Emulation\retroarch\thumbnails\Nintendo - Super Nintendo Entertainment System\Named_Boxarts
; We tell the app the name of the image file. You can put in a single file here for every single rom,
; or you can put in parameters so the image is different for every rom.
; Here I use an image with the same base filename as the rom. In this case, %N and %T are interchangeable
; If ImageFile is not blank, it takes priority over ImageRegex
ImageFile=%n.png
; Here I have an option for a way to look up a file by searching for an existing file that matches a regular expression.
; This is slower, since we must do a regex match and read all the files in a directory.
; It could also be less reliable, if your regex matches multiple files. I'll use the first matched file, in that case.
; This is useful if you don't know for sure what the file name will be, but you've got an idea of how it should be named.
ImageRegex=

; The next example is the same as above, except we use relative paths for roms.
; We'll do NES for a change, too

[2g. NES]
Executable=E:\Emulation\retroarch\retroarch.exe
StartIn=
Parameters=--menu -L "E:\emulation\retroarch\cores\nestopia_libretro.dll"  -c "E:\emulation\retroarch\config\nestopia_libretro.dll.cfg" "%p"
RomBasePath=E:\Emulation\nes\roms\USA
RomRegex=(?<title>[^\\]+)\.(nes)$
ImageBasePath=E:\Emulation\retroarch\thumbnails\Nintendo - Nintendo Entertainment System\Named_Boxarts
ImageFile=%n.png
ImageRegex=

; The interesting thing here is that I want to reference my roms with relative paths, but I've divided them into
; multiple folders, including wii, gcn, wad and vc. I need to filter using my RomRegex to only get things
; in the wii and gc folders, but that requires using parantheses around text that I don't want to capture.
; Thus, noncapturing groups. As explained earlier, (?:) lets you put parentheses around words without including
; them in your title
; Another interesting thing here is that I use %R, which gets the rom's path relative to the
; rom base. So, instead of "bar.iso", it will look like "wii\bar.iso". We need that since our StartIn
; is the base roms directory, and roms can be in either the vc or wii directories.
; This config is probably tied with wii u as most complicated, but really, if you organize your files 
; differently from me it will be less complicated.
[2c. Wii]
Executable=E:\Emulation\wii\emulators\dolphin\Dolphin.exe
StartIn=E:\Emulation\wii\roms
Parameters=-e "%p"
RomBasePath=E:\Emulation\wii\roms
RomRegex=((wii)|(vc))\\(?<title>[^\\]+)\.((elf)|(dol)|(iso)|(wbfs)|(wad)|(gcz))$
ImageBasePath= 
ImageFile=
ImageRegex=

; Since Dolphin handles gamecube games and wii games, they're all mixed up. This is just like the wii config,
; but since all of my gamecube games are in one folder, it is easier to just set that folder, instead of
; doing that crazy shit I did with regular expressions to handle multiple folders.
; So, the lesson is that this will be much simpler if you put all of your roms for a system in one folder.
; No, I won't implement something dumb like "a semicolon-separated list of parameters". Fuck that. 
[2d. Gamecube]
Executable=E:\Emulation\wii\emulators\dolphin\Dolphin.exe
StartIn=
Parameters=-e "%p"
RomBasePath=E:\Emulation\wii\roms\gcn
RomRegex=(?<title>[^\\]+)\.((iso)|(gcm)|(gcz))$
ImageBasePath= 
ImageFile=
ImageRegex=

; This is pretty basic - a combo of several of the simpler aspects of previous configs
; Interesting is that pcsx2 lets you use the --cfgpath="path\to\config" to load up per-game configs. Try it out!
; --nogui is also a good option here
; Lots more at https://wiki.pcsx2.net/Command-line_support, which also has info on customizing steam launch configs and getting game images
[2e. PS2]
Executable=E:\Emulation\ps2\emulators\pcsx2\pcsx2.exe
StartIn=
Parameters="%p" --fullscreen --nogui
RomBasePath=E:\Emulation\ps2\roms
RomRegex=(?<title>[^\\]+)\.iso$
ImageBasePath= E:\Emulation\ps2\PCSX2Bonus\Images
ImageFile=%n.jpg
ImageRegex=